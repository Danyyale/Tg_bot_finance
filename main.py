from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from buttons import *
from handlers import expense, income
from db import *
from excel import create_excel_file

API_TOKEN = ("6726986505:AAGjM4uTLGArO-iuYhbITsfNLDqs0jttR9Q")
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

init_db('database.db')

async def statistics(msg: types.Message):
    await msg.reply('–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?', reply_markup=choose_statistics_period_kb)


# –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_'))
async def process_callback_buttons(callback_query: types.CallbackQuery):
    code = callback_query.data
    if code == 'btn_day':
        data = get_db().get_data_day_export(callback_query.from_user.id)
        filename = create_excel_file(data, callback_query.from_user.id)
        await bot.send_document(callback_query.message.chat.id, open(filename, 'rb'), reply_markup=main_kb)

    elif code == 'btn_week':
        data = get_db().get_data_week_export(callback_query.from_user.id)
        filename = create_excel_file(data, callback_query.from_user.id)
        await bot.send_document(callback_query.message.chat.id, open(filename, 'rb'), reply_markup=main_kb)

    elif code == 'btn_month':
        data = get_db().get_data_month_export(callback_query.from_user.id)
        filename = create_excel_file(data, callback_query.from_user.id)
        await bot.send_document(callback_query.message.chat.id, open(filename, 'rb'), reply_markup=main_kb)

    elif code == 'btn_all_time':
        data = get_db().get_data_all_time(callback_query.from_user.id)
        filename = create_excel_file(data, callback_query.from_user.id)
        await bot.send_document(callback_query.message.chat.id, open(filename, 'rb'), reply_markup=main_kb)


@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    # –ü–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    nick = msg.from_user.username

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await msg.reply(
        f'–ü—Ä–∏–≤–µ—Ç, {nick}üëã !\n\n–Ø —Ç–≤–æ–π –±–æ—Ç- –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤üí∞\n\n'
        f'–ú–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n'
        f'‚û°–ó–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤\n'
        f'‚û°–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n'
        f'‚û°–ü—Ä–æ—Å–º–∞—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü\n'
        f'‚û°–ü—Ä–æ—Å–º–∞—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü\n'
        f'‚û°–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤\n'
        f'‚û°–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ excel —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º –∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n\n'
        f'–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏',

        reply_markup=main_kb)



expense.register_expense_handlers(dp)
income.register_income_handlers(dp)

@dp.message_handler()
async def main(msg: types.Message):
    text = msg.text
    if text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
        await expense.add_expense(msg)
    elif text == '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥':
        await income.add_income(msg)
    elif text == '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö':
        await statistics(msg)
    elif text == '–†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å':
        await spend_today_command(msg)
    elif text == '–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é':
        await spend_week_command(msg)
    elif text == '–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü':
        await spend_month_command(msg)
    elif text == '–î–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é':
        await income_week_command(msg)
    elif text == '–î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü':
        await income_month_command(msg)
    elif text == '–°—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤':
        await financial_status(msg)
    elif text == '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å':
        await delete_last_entry(msg)
    else:
        await msg.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑',
                        reply_markup=main_kb)

async def delete_last_entry(msg: types.Message):   #–≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ id
    row_id = msg.from_user.id
    last_entry = get_db().get_last_entry(row_id)
    if last_entry:
        get_db().delete_entry(last_entry['id'])
        await msg.answer('–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!', reply_markup=main_kb)
    else:
        await msg.answer('–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!', reply_markup=main_kb)
async def spend_today_command(msg: types.Message):
    row_id = msg.from_user.id
    expenses = get_db().get_data_day_filtered(row_id)

    if expenses:
        total_amount = 0
        for date, amount, reason, is_income in expenses:
            if is_income == 0:
                total_amount += amount

        expense_text = ""
        for date, amount, reason, is_income in expenses:
            if is_income == 0:
                expense_text += f" –î–∞—Ç–∞: {date}\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {reason}\n –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                expense_text += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

        await msg.answer(("–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n") + expense_text + f"\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±.", reply_markup=main_kb)
    else:
        await msg.answer("–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç", reply_markup=main_kb)

async def spend_week_command(msg: types.Message):
    row_id = msg.from_user.id
    expenses = get_db().get_data_week_filtered(row_id)

    if expenses:
        total_amount = 0
        for date, amount, reason, is_income in expenses:
            if is_income == 0:
                total_amount += amount

        expense_text = ""
        for date, amount, reason, is_income in expenses:
            if is_income == 0:
                expense_text += f" –î–∞—Ç–∞: {date}\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {reason}\n –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                expense_text += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

        await msg.answer(("–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n") + expense_text + f"\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±.",
                         reply_markup=main_kb)
    else:
        await msg.answer("–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ—Ç", reply_markup=main_kb)

async def spend_month_command(msg: types.Message):
    row_id = msg.from_user.id
    expenses = get_db().get_data_month_filtered(row_id)

    if expenses:
        total_amount = 0
        for date, amount, reason, is_income in expenses:
            if is_income == 0:
                total_amount += amount

        expense_text = ""
        for date, amount, reason, is_income in expenses:
            if is_income == 0:
                expense_text += f" –î–∞—Ç–∞: {date}\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {reason}\n –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                expense_text += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

        await msg.answer(("–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:\n\n") + expense_text + f"\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±.",
                         reply_markup=main_kb)
    else:
        await msg.answer("–†–∞—Å—Ö–æ–¥–æ–≤ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ—Ç", reply_markup=main_kb)

async def income_week_command(msg: types.Message):
    row_id = msg.from_user.id
    incomes = get_db().income_data_week(row_id)

    if incomes:
        total_amount = 0
        for date, amount, reason, is_income in incomes:
            if is_income == 1:
                total_amount += amount

        incomes_text = ""
        for date, amount, reason, is_income in incomes:
            if is_income == 1:
                incomes_text += f" –î–∞—Ç–∞: {date}\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {reason}\n –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                incomes_text += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

        await msg.answer(("–î–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n") + incomes_text + f"\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±.",
                         reply_markup=main_kb)
    else:
        await msg.answer("–î–æ—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ—Ç", reply_markup=main_kb)

async def income_month_command(msg: types.Message):
    row_id = msg.from_user.id
    incomes = get_db().income_data_month(row_id)

    if incomes:
        total_amount = 0
        for date, amount, reason, is_income in incomes:
            if is_income == 1:
                total_amount += amount

        incomes_text = ""
        for date, amount, reason, is_income in incomes:
            if is_income == 1:
                incomes_text += f" –î–∞—Ç–∞: {date}\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {reason}\n –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                incomes_text += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

        await msg.answer(("–î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:\n\n") + incomes_text + f"\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} —Ä—É–±.",
                         reply_markup=main_kb)
    else:
        await msg.answer("–î–æ—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ—Ç", reply_markup=main_kb)

async def financial_status(msg: types.Message):
    # –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤
    total_expenses_cursor = get_db().get_total_expenses(msg.from_user.id)
    total_expenses = total_expenses_cursor.fetchone()[0] if total_expenses_cursor else 0

    # –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–æ–≤
    total_income_cursor = get_db().get_total_income(msg.from_user.id)
    total_income = total_income_cursor.fetchone()[0] if total_income_cursor else 0

    # –í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞–¥ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
    if total_expenses != 0:
        percentage_excess = ((total_income - total_expenses) / total_expenses) * 100
    else:
        percentage_excess = 0  # –ï—Å–ª–∏ –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã —Ä–∞–≤–Ω—ã –Ω—É–ª—é

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º
    if percentage_excess > 0:
        await msg.reply(f'–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞–¥ —Ä–∞—Å—Ö–æ–¥–∞–º–∏: {percentage_excess:.2f}% –û—Ç–ª–∏—á–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!', reply_markup=main_kb)
    elif percentage_excess < 0:
        await msg.reply(f'–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞–¥ –¥–æ—Ö–æ–¥–∞–º–∏: {abs(percentage_excess):.2f}% –°–∏—Ç—É–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏', reply_markup=main_kb)
    else:
        await msg.reply('–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã.', reply_markup=main_kb)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
